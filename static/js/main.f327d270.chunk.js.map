{"version":3,"sources":["tests/mdSample1.md","tests/mdSample2.md","components/Header.tsx","components/Footer.tsx","assets/switzerland.jpg","styles/index.ts","components/Code.tsx","components/Pre.tsx","components/Markdown.tsx","components/Post.tsx","components/Loading.tsx","redux/LoadingState.ts","lib/tyrann/src/utils.ts","lib/tyrann/src/tyrann.ts","models/index.ts","config/index.ts","client/index.ts","redux/entities.ts","redux/index.ts","modules/PostList.tsx","modules/PostPage.tsx","modules/App.tsx","reportWebVitals.ts","index.tsx","tests/testStates.ts"],"names":["useStyles","makeStyles","theme","toolbar","borderBottom","palette","divider","toolbarTitle","flex","toolbarSecondary","justifyContent","overflowX","toolbarLink","padding","spacing","flexShrink","Header","props","classes","title","Fragment","Toolbar","className","IconButton","Typography","component","variant","color","align","noWrap","href","window","location","origin","Copyright","Link","Date","getFullYear","footer","backgroundColor","background","paper","container","display","flexDirection","alignItems","Footer","linkGithub","Container","maxWidth","gutterBottom","target","rel","style","height","banner","objectFit","objectPosition","width","code","fontFamily","fontSize","Code","styles","children","pre","paddingTop","paddingLeft","paddingRight","paddingBottom","Pre","options","overrides","h1","h2","h3","h4","paragraph","p","a","li","withStyles","listItem","marginTop","Markdown","card","order","undefined","marginBottom","cardDetails","cardMedia","withEllipsis","overflow","titleContainer","tagsContainer","flexWrap","marginRight","Tags","tags","map","tag","Chip","label","name","size","Post","post","full","hashLink","id","englishTitle","Grid","item","xs","md","Card","CardContent","to","onClick","copy","alert","abstract","content","ipUniqueVisits","createdOn","toLocaleDateString","Loading","loading","error","errorContent","Alert","severity","CircularProgress","loadingSelector","s","shouldDisplayLoading","buildLoadingReducers","builder","thunk","onFulfilled","onPending","onRejected","addCase","pending","state","fulfilled","action","payload","rejected","formatString","str","args","Object","entries","key","value","replace","RegExp","restMatch","match","length","TypeError","tagSchema","yup","object","number","required","string","postSchema","array","date","updatedOn","camelCase","configSchema","testState","baseUrl","oneOf","localConfig","require","devConfig","console","log","config","validateSync","num","arr","obj","createClient","boolean","api","axiosInstance","axios","Axios","create","fetch","method","path","operation","paths","pathParams","Error","validate","sanitizedParams","finalUrl","query","keys","URLSearchParams","toString","request","url","response","fullPath","responseURL","warnError","warn","status","JSON","stringify","data","responseDef","responses","schema","transform","result","ok","errors","get","body","put","del","tyrann","postId","baseURL","fetchAllPosts","createAsyncThunk","client","fetchPostById","thunkApi","postsAdapter","createEntityAdapter","selectId","sortComparer","b","getTime","postsInitialState","getInitialState","postsSlice","createSlice","initialState","reducers","postAddMany","addMany","extraReducers","setAll","addOne","postsSelectors","getSelectors","posts","reducer","combineReducers","entities","connect","_connect","selectAll","dispatch","load","useEffect","i","withRouter","ownProps","parseInt","params","selectById","App","matches","useMediaQuery","disableGutters","alt","src","exact","PostList","PostPage","store","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LoremIpsum","configureStore","middleware","getDefaultMiddleware","serializableCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f327d270.chunk.js","sourcesContent":["export default \"Paragraphs are separated by a blank line.\\n\\n2nd paragraph. *Italic*, **bold**, and `monospace`. Itemized lists\\nlook like:\\n\\n  * this one\\n  * that one\\n  * the other one\\n\\nNote that --- not considering the asterisk --- the actual text\\ncontent starts at 4-columns in.\\n\\n> Block quotes are\\n> written like so.\\n>\\n> They can span multiple paragraphs,\\n> if you like.\\n\\nUse 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \\\"it's all\\nin chapters 12--14\\\"). Three dots ... will be converted to an ellipsis.\\nUnicode is supported. ☺\\n\\n\\n\\nAn h2 header\\n------------\\n\\nHere's a numbered list:\\n\\n 1. first item\\n 2. second item\\n 3. third item\\n\\nNote again how the actual text starts at 4 columns in (4 characters\\nfrom the left side). Here's a code sample:\\n\\n    # Let me re-iterate ...\\n    for i in 1 .. 10 { do-something(i) }\\n\\nAs you probably guessed, indented 4 spaces. By the way, instead of\\nindenting the block, you can use delimited blocks, if you like:\\n\\n~~~\\ndefine foobar() {\\n    print \\\"Welcome to flavor country!\\\";\\n}\\n~~~\\n\\n(which makes copying & pasting easier). You can optionally mark the\\ndelimited block for Pandoc to syntax highlight it:\\n\\n~~~python\\nimport time\\n# Quick, count to ten!\\nfor i in range(10):\\n    # (but not *too* quick)\\n    time.sleep(0.5)\\n    print i\\n~~~\\n\\n\\n\\n### An h3 header ###\\n\\nNow a nested list:\\n\\n 1. First, get these ingredients:\\n\\n      * carrots\\n      * celery\\n      * lentils\\n\\n 2. Boil some water.\\n\\n 3. Dump everything in the pot and follow\\n    this algorithm:\\n\\n        find wooden spoon\\n        uncover pot\\n        stir\\n        cover pot\\n        balance wooden spoon precariously on pot handle\\n        wait 10 minutes\\n        goto first step (or shut off burner when done)\\n\\n    Do not bump wooden spoon or it will fall.\\n\\nNotice again how text always lines up on 4-space indents (including\\nthat last line which continues item 3 above).\\n\\nHere's a link to [a website](http://foo.bar), to a [local\\ndoc](local-doc.html), and to a [section heading in the current\\ndoc](#an-h2-header). Here's a footnote [^1].\\n\\n[^1]: Footnote text goes here.\\n\\nTables can look like this:\\n\\nsize  material      color\\n----  ------------  ------------\\n9     leather       brown\\n10    hemp canvas   natural\\n11    glass         transparent\\n\\nTable: Shoes, their sizes, and what they're made of\\n\\n(The above is the caption for the table.) Pandoc also supports\\nmulti-line tables:\\n\\n--------  -----------------------\\nkeyword   text\\n--------  -----------------------\\nred       Sunsets, apples, and\\n          other red or reddish\\n          things.\\n\\ngreen     Leaves, grass, frogs\\n          and other things it's\\n          not easy being.\\n--------  -----------------------\\n\\nA horizontal rule follows.\\n\\n***\\n\\nHere's a definition list:\\n\\napples\\n  : Good for making applesauce.\\noranges\\n  : Citrus!\\ntomatoes\\n  : There's no \\\"e\\\" in tomatoe.\\n\\nAgain, text is indented 4 spaces. (Put a blank line between each\\nterm/definition pair to spread things out more.)\\n\\nHere's a \\\"line block\\\":\\n\\n| Line one\\n|   Line too\\n| Line tree\\n\\nand images can be specified like so:\\n\\n![example image](example-image.jpg \\\"An exemplary image\\\")\\n\\nInline math equations go in like so: $\\\\omega = d\\\\phi / dt$. Display\\nmath should get its own line and be put in in double-dollarsigns:\\n\\n$$I = \\\\int \\\\rho R^{2} dV$$\\n\\nAnd note that you can backslash-escape any punctuation characters\\nwhich you wish to be displayed literally, ex.: \\\\`foo\\\\`, \\\\*bar\\\\*, etc.\";","export default \"- Requirements\\n\\n```\\nAndroid Studio 3.6\\nnode v12.14.0\\nyarn 1.22.p\\n```\\n\\n- Run Commands\\n```\\ngit clone https://github.com/fitness-dev/fitness-app-client\\ncd fitness-app-client\\ngit submodule update --init --recursive\\nyarn android\\n```\\n\\n- Run & Test android version using Android Studio 3.6.\\n\\n\\n- Env\\n```\\nexport JAVA_HOME=$(/usr/libexec/java_home)\\nexport ANDROID_HOME=\\\"/Users/chenyuxuan/Library/Android/sdk\\\"\\nexport PATH=$JAVA_HOME/bin:$PATH\\nexport PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\\n```\\n\\n## iOS Installation\\n\\n- Requirements\\n\\n```\\nmacOS Catalina 10.15.4\\nXCode 12.1\\nnode v12.14.0\\nyarn 1.22.p\\nCocoaPods 1.10.0\\n```\\n\\n- Run Commands\\n\\n```\\ngit clone https://github.com/fitness-dev/fitness-app-client\\ncd fitness-app-client\\ngit submodule update --init --recursive\\nyarn \\nnpx pod-install\\nVER=<x.y.z> MODE=\\\"<release|staging>\\\" yarn archive\\n```\\n\\n- Open in XCode\\n\\n  - Open XCode, from `File -> Open...`, open `ios/Fitness App.xcworkspace`\\n  \\n- Build for iPhone\\n    \\n    - With packager server\\n         - Open project in XCode, select build target to `Fitness App`\\n\\n\\n## Override Configuration\\n\\nTo override configuration specified in `client.config.staging.json` in development, you should place a file called `override-config.local.json` under the project root. The file follows the shape defined in `./client/config.ts`, and will be merged into the current config shallowly.\\n\\nFor example, to change the current URL of main server, you can give the following `override-config.json` file.\\n\\n```json\\n{\\n    \\\"serverBaseUrl\\\": \\\"https://yet-another-wopal-server.wopal.dev\\\"\\n}\\n```\\n\\n## Commit\\n\\nUse `yarn commit` to commit unless necessary. It does sanity check before you commit. \\n\\n## Archive\\n\\nBy archiving you create a release/staging version and get ready to upload it to [App Store Connect](https://appstoreconnect.apple.com)\\n\\n+ Ensure your python version >= `3.6.4`\\n+ Run `xcode-select -print-path` to ensure that the XCode we are using satisfies Apple's requirement\\n+ Ensure the version is correct\\n\\n+ Run:\\n\\n```\\nVER=<x.y.z> MODE=\\\"<release|staging>\\\" yarn archive\\n```\\n\\nTo skip archiving, add `SKIP_ARCHIVE=1`.\\n\\nAfter it is compiled successfully, the resulting `<release|staging>.xcarchive` directory appears under `ios/build-<release|staging>`. Show it in `Finder` and double click it, then it appears in `Organizer` of XCode. The uploading process is as usual.\\n\\nThis action modifies the Target items of the project with Regex, and is not ensured of its correctness. We must make damn sure that you have commited your changes to the project files before you run this action.\\n\\n## Procedure of Client Development\\n1. Designers open a ticket in Trello.\\n2. Developers make changes directly on branch `dev`, or make changes on his/her branch.\\n3. New code is reviewed and merged to `dev`.\\n4. Archive a `staging` version for TestFlight.\\n5. Designers review the new version on TestFlight.\\n6. Go to step 2 if the new version does not satisfy the designer's need.\\n7. A bunch of new features are on `dev`.\\n8. Manager decides whether to make a new release. If so, merge current `dev` into `master` branch, and archive a `release` version for TestFlight.\\n9. Submit the new version to AppStore if applicable.\\n\\n## Add Firebase SDK for android\\nダウンロードした google-services.json ファイルを読み込みます。このプラグインを使用するよう、build.gradle ファイルを修正してください。\\n\\nプロジェクト レベルの build.gradle（<project>/build.gradle）:\\n  \\n```\\nbuildscript {\\n  repositories {\\n    // Check that you have the following line (if not, add it):\\n    google()  // Google's Maven repository\\n  }\\n  dependencies {\\n    ...\\n    // Add this line\\n    classpath 'com.google.gms:google-services:4.3.3'\\n  }\\n}\\n\\nallprojects {\\n  ...\\n  repositories {\\n    // Check that you have the following line (if not, add it):\\n    google()  // Google's Maven repository\\n    ...\\n  }\\n}\\n```\\n\\nアプリレベルの build.gradle（\\\\<project\\\\>/\\\\<app-module\\\\>/build.gradle）:\\n\\n```\\napply plugin: 'com.android.application'\\n// Add this line\\napply plugin: 'com.google.gms.google-services'\\n\\ndependencies {\\n  // add the Firebase SDK for Google Analytics\\n  implementation 'com.google.firebase:firebase-analytics:17.2.2'\\n  // add SDKs for any other desired Firebase products\\n  // https://firebase.google.com/docs/android/setup#available-libraries\\n}\\n```\\n\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        borderBottom: `1px solid ${theme.palette.divider}`,\n    },\n    toolbarTitle: {\n        flex: 1,\n    },\n    toolbarSecondary: {\n        justifyContent: 'space-between',\n        overflowX: 'auto',\n    },\n    toolbarLink: {\n        padding: theme.spacing(1),\n        flexShrink: 0,\n    },\n}));\n\nexport interface HeaderProps {\n    title: string;\n}\n\nexport default function Header(props: HeaderProps) {\n    const classes = useStyles();\n    const { title } = props;\n\n    return (\n        <React.Fragment>\n            <Toolbar className={classes.toolbar}>\n                <IconButton>\n                    <MenuIcon />\n                </IconButton>\n\n                <Typography\n                    component=\"h2\"\n                    variant=\"h5\"\n                    color=\"inherit\"\n                    align=\"center\"\n                    noWrap\n                    className={classes.toolbarTitle}\n                >\n                    <a href={`${window.location.origin}/#`}>\n                        {title}\n                    </a>\n                </Typography>\n\n                <IconButton>\n                    <SearchIcon />\n                </IconButton>\n            </Toolbar>\n        </React.Fragment>\n    );\n}\n\nHeader.propTypes = {\n    sections: PropTypes.array,\n    title: PropTypes.string,\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport GitHub from '@material-ui/icons/GitHub';\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://blog.chenyu.pw\">\n                blog.chenyu.pw\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    footer: {\n        backgroundColor: theme.palette.background.paper,\n        // marginTop: theme.spacing(8),\n        padding: theme.spacing(6, 0),\n    },\n    container: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    }\n}));\n\nexport interface FooterProps {\n    title: string;\n    linkGithub: string;\n}\n\nexport default function Footer(props: FooterProps) {\n    const classes = useStyles();\n    const { linkGithub, title } = props;\n\n    return (\n        <footer className={classes.footer}>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Typography variant=\"h6\" align=\"center\" gutterBottom color=\"textSecondary\">\n                    {title}\n                </Typography>\n                <Link href={linkGithub} target=\"_blank\" rel=\"noreferrer\" color=\"textSecondary\">\n                    <GitHub>github</GitHub>\n                </Link>\n                <div style={{height: 10}}/>\n                <Copyright />\n            </Container>\n        </footer>\n    );\n}","export default __webpack_public_path__ + \"static/media/switzerland.51c345ba.jpg\";","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    banner: {\n        objectFit: \"cover\",\n        objectPosition: \"bottom\",\n        height: \"50vh\",\n        width: \"100%\",\n    },\n});\n\n\nexport default useStyles;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    code: {\n        background: \"#f3f3f3\",\n        fontFamily: \"Consolas, monospace\",\n        fontSize: 14,\n    }\n});\n\nexport interface CodeProps {\n    children: string;\n}\n\nconst Code: React.FC<CodeProps> = (props) => {\n    \n    const styles = useStyles();\n\n    return (\n        <code className={styles.code}>\n            {props.children}\n        </code>\n    )\n} \n\nexport default Code;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    pre: {\n        overflowX: \"scroll\",\n        paddingTop: 10,\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingBottom: 10,\n        background: \"#f3f3f3\",\n    }\n});\n\nexport interface CodeProps {\n    children: string;\n}\n\nconst Pre: React.FC<CodeProps> = (props) => {\n    const styles = useStyles();\n\n    return (\n        <pre className={styles.pre}>\n            {props.children}\n        </pre>\n    )\n} \n\nexport default Pre;","import React from 'react';\nimport ReactMarkdown from 'markdown-to-jsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Code from './Code';\nimport Pre from './Pre';\n\nconst styles = (theme: any) => ({\n    listItem: {\n        marginTop: theme.spacing(1),\n    },\n});\n\nconst options = {\n    overrides: {\n        h1: {\n            component: Typography,\n            props: {\n                gutterBottom: true,\n                variant: 'h5',\n            },\n        },\n        h2: { component: Typography, props: { gutterBottom: true, variant: 'h6' } },\n        h3: { component: Typography, props: { gutterBottom: true, variant: 'subtitle1' } },\n        h4: {\n            component: Typography,\n            props: { gutterBottom: true, variant: 'caption', paragraph: true },\n        },\n        p: { component: Typography, props: { paragraph: true } },\n        a: { component: Link },\n        li: {\n            component: withStyles(styles)((\n                { classes, ...props }: { classes: any }\n            ) => (\n                <li className={classes.listItem}>\n                    <Typography component=\"span\" {...props} />\n                </li>\n            )\n            ),\n        },\n        pre: {\n            component: Pre,\n        },\n        code: {\n            component: Code,\n        }\n    },\n};\n\nexport default function Markdown(props: any) {\n    return <ReactMarkdown options={options} {...props} />;\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { PostType, TagType } from '../models';\nimport Markdown from './Markdown';\nimport { Link } from 'react-router-dom';\nimport { Chip } from '@material-ui/core';\nimport Share from '@material-ui/icons/Share';\nimport copy from 'copy-to-clipboard';\nimport { useState } from 'react';\n\n\nconst useStyles = (props?: PostProps) => makeStyles({\n    card: {\n        display: 'flex',\n        marginTop: props?.order === 0 ? 10 : undefined,\n        marginBottom: 10,\n    },\n    cardDetails: {\n        flex: 1,\n        maxWidth: \"100%\",\n    },\n    cardMedia: {\n        width: 160,\n    },\n    withEllipsis: {\n        overflow: 'hidden',\n        display: '-webkit-box',\n        '-webkit-line-clamp': 3,\n        '-webkit-box-orient': 'vertical',\n    },\n    titleContainer: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n    },\n    tagsContainer: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            marginRight: 5,\n        },\n        '& > *:last-child': {\n            marginRight: 0,\n        }\n    },\n});\n\nexport interface TagProps {\n    tags: TagType[];\n}\n\n\nexport function Tags(props: TagProps) {\n    const { tags } = props;\n    const classes = useStyles()();\n\n    return (\n        <div className={classes.tagsContainer}>\n            {tags.map(tag => (\n                <Chip\n                    key={tag.name}\n                    label={tag.name}\n                    size=\"small\"\n                    color=\"secondary\"\n                />\n            ))}\n        </div>\n    );\n}\n\nexport interface PostProps {\n    order: number,\n    post: PostType,\n    full?: boolean,\n}\n\nexport default function Post(props: PostProps) {\n    const classes = useStyles(props)();\n    const { post, full } = props;\n\n    const hashLink = `/${post.id}/${post.englishTitle}`;\n\n    const onPressShare = () => {\n        copy(\n            `${window.location.origin}/#${hashLink}`\n        );\n        alert(\"Link copied! \");\n    }\n\n    return (\n        <Grid item xs={12} md={12}>\n            <Card className={classes.card}>\n                <div className={classes.cardDetails}>\n                    <CardContent>\n                        <div className={classes.titleContainer}>\n                            <Link to={hashLink}>\n                                <Typography component=\"h2\" variant=\"h5\">\n                                    {post.title}\n                                </Typography>\n                            </Link>\n                            <div onClick={onPressShare}>\n                                <Share\n                                    color=\"secondary\"\n                                />\n                            </div>\n                        </div>\n                        <div style={{ height: 16 }} />\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                            {post.abstract}\n                        </Typography>\n                        <div style={{ height: 16 }} />\n                        <div className={full ? undefined : classes.withEllipsis}>\n                            <Markdown>\n                                {post.content}\n                            </Markdown>\n                        </div>\n                        <div style={{ height: 16 }} />\n                        {!full ?\n                            <div style={{ display: \"flex\", justifyContent: 'space-between', alignItems: 'center' }}>\n                                <Tags tags={post.tags} />\n                                <Typography variant=\"caption\" color=\"textSecondary\">\n                                    {post.ipUniqueVisits} visit{post.ipUniqueVisits > 1 ? \"s\" : \"\"}, {props.post.createdOn.toLocaleDateString()}\n                                </Typography>\n                            </div>\n                            : null\n                        }\n\n                    </CardContent>\n                </div>\n            </Card>\n\n        </Grid >\n    );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport LoadingState from '../redux/LoadingState';\n\nconst useStyles = makeStyles({\n    container: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: 250,\n    }\n});\n\nexport interface LoadingProps {\n    loading: LoadingState['loading'];\n}\n\nconst Loading: React.FC<LoadingProps> = (props) => {\n    const { error, loading } = props.loading;\n    const styles = useStyles();\n\n    const errorContent = (\n        <Alert severity=\"error\">\n            {\"Sorry, we got an error when loading. Please check your connectivity and check again. \"}\n        </Alert>\n    );\n\n    const content = error ?\n        errorContent :\n        loading ? <CircularProgress color=\"secondary\" /> :\n            null;\n\n    return (\n        <div className={styles.container}>\n            {content}\n        </div>\n    )\n}\n\nexport default Loading;","import { AsyncThunk, ActionReducerMapBuilder, CaseReducer, Draft } from '@reduxjs/toolkit'\n\n\nexport default interface LoadingState {\n    loading: {\n        loading: boolean;\n        error: boolean;\n    }\n}\n\nexport const createLoadingState = (): LoadingState => ({\n    loading: {\n        loading: true,\n        error: false,\n    }\n})\n\nexport const loadingSelector = <State extends LoadingState>(s: State): LoadingProps => ({\n    shouldDisplayLoading: s.loading.loading || s.loading.error,\n    loading: s.loading,\n})\n\nexport interface LoadingProps {\n    shouldDisplayLoading: boolean;\n    loading: LoadingState['loading']\n}\n\nexport const buildLoadingReducers = \n    <State extends LoadingState, ReturnType extends any>(\n        builder: ActionReducerMapBuilder<State>,\n        thunk: AsyncThunk<ReturnType, any, any>,\n        onFulfilled?: (state: Draft<State>, payload: ReturnType) => void,\n        onPending?: (state: Draft<State>) => void,\n        onRejected?: (state: Draft<State>) => void,\n    ) => {\n        builder.addCase(thunk.pending, state => {\n            state.loading.loading = true;\n            state.loading.error = false;\n            onPending?.(state);\n        });\n\n        builder.addCase(thunk.fulfilled, (state, action) => {\n            state.loading.loading = false;\n            state.loading.error = false;\n            onFulfilled?.(state, action.payload);\n        });\n\n        builder.addCase(thunk.rejected, state => {\n            state.loading.loading = false;\n            state.loading.error = true;\n            onRejected?.(state);\n        });\n    }","\nexport function formatString(str: string, args: object) {\n    for (const [key, value] of Object.entries(args)) {\n        str = str.replace(new RegExp(`\\{${key}\\}`, \"gi\"), value);\n    }\n    const restMatch = str.match(/{[a-zA-Z0-9]+}/ig);\n    if (restMatch?.length) {\n        throw new TypeError(`Unmatched params ${restMatch}`);\n    }\n    return str;\n};\n","import { Api, BasePaths, InferPaths } from \"./api\";\nimport Axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\nimport { Methods, Path } from \"./path\";\nimport { MapOperationToBodyType, MapOperationToPathParamsType, MapOperationToQueryType, MapOperationToResponse, Operation } from \"./operation\";\nimport * as yup from 'yup';\nimport { formatString } from \"./utils\";\n\n\ntype NonNullable<T> = Exclude<T, null | undefined>;\n\n\nexport type TyrannConfig<OperationType extends Operation> = AxiosRequestConfig & {\n    query?: MapOperationToQueryType<OperationType>,\n    pathParams?: MapOperationToPathParamsType<OperationType>,\n};\n\nexport const tyrann = <Paths extends BasePaths, ApiType extends Api<Paths>>(\n    api: ApiType, axiosInstance?: AxiosInstance\n) => {\n    const axios = axiosInstance || Axios.create();\n\n    type ApiPaths = InferPaths<ApiType>;\n    type PathTypes = keyof ApiPaths & string;\n    type ValidMethods = Methods & keyof Path;\n\n    type FetchType = <PathType extends PathTypes, Method extends ValidMethods>(\n        method: Method,\n        path: PathType,\n        config?: TyrannConfig<NonNullable<ApiPaths[PathType][typeof method]>>\n    ) => Promise<\n        MapOperationToResponse<NonNullable<ApiPaths[PathType][typeof method]>>\n    >;\n\n    type MethodType<Method extends ValidMethods> = <PathType extends PathTypes>(\n        path: PathType,\n        config?: TyrannConfig<NonNullable<ApiPaths[PathType][Method]>>\n    ) => Promise<\n        MapOperationToResponse<NonNullable<ApiPaths[PathType][Method]>>\n    >;\n\n    type PostType = <PathType extends PathTypes>(\n        path: PathType,\n        body: MapOperationToBodyType<NonNullable<ApiPaths[PathType][\"post\"]>>,\n        config?: TyrannConfig<NonNullable<ApiPaths[PathType][\"post\"]>>\n    ) => Promise<\n        MapOperationToResponse<NonNullable<ApiPaths[PathType][\"post\"]>>\n    >;\n\n    const fetch: FetchType = async (method, path, config) => {\n        const operation = (api as any).paths[path]?.[method] as Operation;\n        let finalUrl: string;\n        if (operation.pathParams) {\n            if (config?.pathParams === undefined) {\n                throw new Error(`Path params are not supplied to ${method} ${path}`);\n            }\n            const sanitizedParams = await operation.pathParams.validate(config?.pathParams!);\n            finalUrl = formatString(path, sanitizedParams);\n        } else {\n            finalUrl = path;\n        }\n        if (operation.query) {\n            if (config?.query === undefined) {\n                throw new Error(`Query params are not supplied to ${method} ${path}`);\n            }\n            const sanitizedParams = await operation.query.validate(config?.query!);\n            if (Object.keys(sanitizedParams).length > 0) {\n                finalUrl += '?' + new URLSearchParams(sanitizedParams).toString();\n            }\n        }\n\n        const response = await axios.request({\n            url: finalUrl,\n            method: method as AxiosRequestConfig['method'],\n            ...config,\n        });\n\n        const fullPath = response.request.responseURL || finalUrl;\n\n        const warnError = () => {\n            console.warn(`${method} ${fullPath} received unexpected data with code ${response.status}: \\n${fullPath}\\n${JSON.stringify(response.data, undefined, 2)}`)\n        }\n\n        const responseDef = (operation as any)?.responses?.[`${response.status}`];\n        let schema: yup.BaseSchema | undefined = responseDef;\n\n        if (schema === undefined) {\n            warnError();\n            throw new Error(`${method} ${fullPath} response of status ${response.status} is not handled`);\n        }\n\n        let transform: any;\n\n        if (responseDef.schema !== undefined) {\n            schema = responseDef.schema;\n            transform = responseDef.transform;\n        }\n\n        try {\n            let result = await schema!.validate(response.data);\n            result = transform ? transform(result) : result;\n            const ok = response.status >= 200 && response.status < 400;\n\n            return {\n                ok,\n                path,\n                url: finalUrl,\n                status: response.status,\n                [response.status]: result\n            } as any\n        } catch (e) {\n            warnError();\n            throw new Error(`${method} ${fullPath} got invalid data: ${JSON.stringify(e.errors, undefined, 2)}`);\n        }\n    }\n\n    const get: MethodType<\"get\"> = (path, config) => fetch(\"get\", path, config);\n    const post: PostType = (path, body, config) => fetch(\"post\", path, { data: body, ...config });\n    const put: PostType = (path, body, config) => fetch(\"put\", path, { data: body, ...config });\n    const del: MethodType<\"delete\"> = (path, config) => fetch(\"delete\", path, config);\n\n    return {\n        fetch,\n        get,\n        post,\n        put,\n        del,\n        api,\n        axios,\n    };\n}","import { yup } from '../lib/tyrann/src';\n\nexport const tagSchema = yup.object({\n    id: yup.number().required(),\n    name: yup.string().required(),\n})\n\nexport const postSchema = yup.object({\n    id: yup.number().required(),\n    title: yup.string().required(),\n    englishTitle: yup.string().required(),\n    abstract: yup.string().required(),\n    content: yup.string().required(),\n    ipUniqueVisits: yup.number().required(),\n    tags: yup.array(tagSchema).required(),\n    createdOn: yup.date().required(),\n    updatedOn: yup.date().required(),\n})\n    .camelCase();\n\nexport type PostType = yup.InferType<typeof postSchema>;\n\nexport type TagType = yup.InferType<typeof tagSchema>;","import * as yup from 'yup';\nimport testStates from '../tests/testStates';\n\nconst allowedBaseUrls = [\n    \"http://localhost:8002\",\n    \"https://blog.chenyu.pw\",\n    \"origin\",\n]\n\n\nexport const configSchema = yup.object({\n    testState: yup.string(),\n    baseUrl: yup.string().oneOf(allowedBaseUrls),\n})\n\nexport type Config = yup.InferType<typeof configSchema>;\n\nexport const localConfig = require(\"../config.local.json\");\nexport const devConfig = require(\"../config.dev.json\");\n\nconsole.log({localConfig})\nexport default configSchema.validateSync(process.env.NODE_ENV === \"production\" ? devConfig : localConfig)","import Axios from 'axios';\nimport { tyrann, yup } from '../lib/tyrann/src'\nimport { postSchema } from '../models';\nimport config, { Config } from '../config'\n\n// tslint:disable-next-line: variable-name\nconst { number: num, array: arr, string: str, date, object: obj, boolean: bool } = yup;\n\nconst createClient = (config: Config) => tyrann({\n    paths: {\n        \"/blog/posts/\": {\n            get: {\n                responses: {\n                    '200': arr(\n                        postSchema.camelCase()\n                    )\n                }\n            }\n        },\n        \"/blog/posts/{postId}/\": {\n            get: {\n                pathParams: obj({\n                    postId: num(),\n                }),\n                responses: {\n                    '200': postSchema\n                }\n            }\n        }\n    },\n},\n    Axios.create({\n        baseURL: config.baseUrl === \"origin\" ? window.location.origin : config.baseUrl,\n    })\n);\n\nexport default createClient(config);","import {\n    createAsyncThunk,\n    createEntityAdapter,\n    createSlice,\n} from '@reduxjs/toolkit'\nimport { RootState } from '.';\nimport { PostType } from '../models';\nimport { buildLoadingReducers, createLoadingState } from './LoadingState'\nimport client from '../client';\n\nexport const fetchAllPosts = createAsyncThunk(\n    'posts/fetchAllPosts',\n    async (_args = undefined, _thunkApi): Promise<PostType[]> => {\n        const result = await client.get(\"/blog/posts/\")\n        return result['200']!;\n    }\n)\n\nexport const fetchPostById = createAsyncThunk(\n    'posts/fetchPostById',\n    async (postId: number, thunkApi): Promise<PostType> => {\n        const result = await client.get(\"/blog/posts/{postId}/\", {\n            pathParams: {\n                postId\n            }\n        })\n        return result['200']!;\n    }\n)\n\nexport const postsAdapter = createEntityAdapter<PostType>({\n    // Assume IDs are stored in a field other than `book.id`\n    selectId: (post) => post.id,\n    // Keep the \"all IDs\" array sorted based on book titles\n    sortComparer: (a, b) => b.createdOn.getTime() - a.createdOn.getTime(),\n})\n\nexport const postsInitialState = postsAdapter.getInitialState({\n    ...createLoadingState()\n})\n\nexport const postsSlice = createSlice({\n    name: 'posts',\n    initialState: postsInitialState,\n    reducers: {\n        // Can pass adapter functions directly as case reducers.  Because we're passing this\n        // as a value, `createSlice` will auto-generate the `bookAdded` action type / creator\n        postAddMany: postsAdapter.addMany,\n    },\n    extraReducers: builder => {\n        buildLoadingReducers(\n            builder,\n            fetchAllPosts,\n            (state, payload) => {\n                postsAdapter.setAll(state, payload);\n            }\n        );\n\n        buildLoadingReducers(\n            builder,\n            fetchPostById,\n            (state, payload) => {\n                postsAdapter.addOne(state, payload);\n            }\n        );\n    }\n});\n\nexport const postsSelectors = postsAdapter.getSelectors<RootState>(s => s.posts);\n","import {\n    configureStore,\n    DeepPartial,\n    getDefaultMiddleware,\n} from '@reduxjs/toolkit'\n\nimport {\n    Connect, \n    connect as _connect,\n} from 'react-redux';\n\nimport { ThunkDispatch as _ThunkDispatch } from \"@reduxjs/toolkit\";\n\nimport {\n    AnyAction,\n    combineReducers\n} from 'redux';\n\nimport * as entities from './entities';\n\n\nexport const reducer = combineReducers({\n    posts: entities.postsSlice.reducer\n});\n\nexport default function createStore(preloadedState?: DeepPartial<RootState>) {\n    return configureStore({\n        reducer,\n        middleware: getDefaultMiddleware({\n            serializableCheck: false,\n        }),\n        preloadedState,\n    });\n}\n\nexport type RootState = ReturnType<typeof reducer>;\nexport const connect: Connect<RootState> = _connect;\nexport type ThunkDispatch = _ThunkDispatch<RootState, {}, AnyAction>;\n","\nimport { useEffect } from \"react\";\nimport Post from \"../components/Post\";\nimport { PostType } from \"../models\";\nimport Loading from \"../components/Loading\";\nimport { connect, ThunkDispatch } from \"../redux\";\nimport { fetchAllPosts, postsSelectors } from \"../redux/entities\"\nimport { LoadingProps, loadingSelector } from \"../redux/LoadingState\";\n\nexport interface PostsProps {\n    posts: PostType[]\n    load: () => void;\n}\n\nexport const PostListComponent: React.FC<PostsProps & LoadingProps> = (props) => {\n    \n    useEffect(() => {\n        props.load();\n    }, []);\n\n    if (props.shouldDisplayLoading) {\n        return (\n            <Loading loading={props.loading}/>\n        );\n    }\n\n    return (\n        <>\n            {props.posts.map(((post, i) => (\n                <Post\n                    key={post.id}\n                    order={i}\n                    post={post}\n                />\n            )))}\n        </>\n    );\n};\n\nexport default connect(\n    (s) => ({\n        ...loadingSelector(s.posts),\n        posts: postsSelectors.selectAll(s)\n    }),\n    (dispatch: ThunkDispatch) => ({\n        load: () => dispatch(fetchAllPosts())\n    })\n)(PostListComponent);","import { useEffect } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\n\nimport Loading from '../components/Loading'\nimport Post from '../components/Post'\nimport { PostType } from '../models'\nimport { connect, ThunkDispatch } from '../redux'\nimport { fetchPostById, postsSelectors } from '../redux/entities'\nimport LoadingState, { LoadingProps, loadingSelector } from '../redux/LoadingState'\n\nexport type PostPageRouteParams = {\n    postId: string;\n}\n\nexport type PostPageParams = {\n    postId: number;\n    post?: PostType;\n    load: () => void;\n};\n\nexport const PostPageComponent: React.FC<PostPageParams & LoadingProps> = (props) => {\n    const { post } = props;\n\n    useEffect(() => {\n        props.load();\n    }, []);\n\n    if (props.shouldDisplayLoading) {\n        return (\n            <Loading loading={props.loading}/>\n        );\n    }\n\n    return (\n        <Post\n            order={0}\n            post={post!}\n            full\n        />\n    )\n}\n\nexport default withRouter(\n    connect(\n        (s, ownProps: RouteComponentProps<PostPageRouteParams>) => {\n            const postId = parseInt(ownProps.match.params.postId);\n            return {\n                ...loadingSelector(s.posts),\n                postId,\n                post: postsSelectors.selectById(s, postId),\n            }\n        },\n        (dispatch: ThunkDispatch, ownProps: RouteComponentProps<PostPageRouteParams>) => ({\n            load: () => dispatch(fetchPostById(parseInt(ownProps.match.params.postId)))\n        })\n    )(PostPageComponent)\n);","import React from 'react';\nimport Header from '../components/Header';\nimport Footer from \"../components/Footer\";\nimport Container from '@material-ui/core/Container';\nimport banner from '../assets/switzerland.jpg';\nimport useStyles from '../styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport PostList from './PostList';\nimport PostPage from './PostPage';\n\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\n\nexport default function App() {\n\n    const styles = useStyles();\n    const matches = useMediaQuery('(max-width:600px)');\n\n    return (\n        <>\n            <Container maxWidth=\"lg\" disableGutters={matches}>\n                <img alt=\"banner\" src={banner} className={styles.banner} />\n                <Header title=\"Chenyu's Blog\" />\n                <main>\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <PostList />\n                            </Route>\n                            <Route exact path=\"/:postId\">\n                                <PostPage />\n                            </Route>\n                            <Route exact path=\"/:postId/:title\">\n                                <PostPage />\n                            </Route>\n                        </Switch>\n                    </Router>\n                </main>\n            </Container>\n            <Footer title=\"Chenyu's Blog\" linkGithub=\"https://github.com/hanayashiki\" />\n        </>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './modules/App';\nimport createStore from './redux';\nimport reportWebVitals from './reportWebVitals';\nimport testStates from './tests/testStates';\nimport config from './config';\n\nlet store;\n\nif (process.env.NODE_ENV === \"development\") {\n    store = createStore(config.testState && testStates()[config.testState as any]);\n    console.log(config)\n} else {\n    store = createStore();\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { DeepPartial } from '@reduxjs/toolkit'\nimport { RootState } from '../redux'\nimport { postsInitialState, postsSlice } from '../redux/entities'\nimport { LoremIpsum } from \"lorem-ipsum\";\n\nconst lorem = new LoremIpsum();\n\nconst createTestStates =\n    <Consts, States extends { [key in keyof Consts]: DeepPartial<RootState>}>(states: States) => {\n        return states;\n    }\n\nconst initialState = postsInitialState;\n\nconst testStates = () => createTestStates({\n    \"test-posts-simple\": {\n        posts: postsSlice.reducer(\n            initialState,\n            postsSlice.actions.postAddMany([\n                {\n                    id: 1,\n                    tags: [],\n                    title: lorem.generateWords(10),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: lorem.generateParagraphs(1),\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-04'),\n                    ipUniqueVisits: 11241,\n                }\n            ]),\n        )\n    },\n    \"test-posts-multi\": {\n        posts: postsSlice.reducer(\n            initialState,\n            postsSlice.actions.postAddMany([\n                {\n                    id: 1,\n                    tags: [],\n                    title: lorem.generateWords(10),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: lorem.generateParagraphs(1),\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-07'),\n                    ipUniqueVisits: 0,\n                },\n                {\n                    id: 2,\n                    tags: [],\n                    title: lorem.generateWords(15),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: lorem.generateParagraphs(2),\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-09'),\n                    ipUniqueVisits: 0,\n                },\n                {\n                    id: 3,\n                    tags: [],\n                    title: lorem.generateWords(8),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: lorem.generateParagraphs(2),\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-04'),\n                    ipUniqueVisits: 0,\n                },\n            ]),\n        )\n    },\n    \"test-posts-md\": {\n        posts: postsSlice.reducer(\n            initialState,\n            postsSlice.actions.postAddMany([\n                {\n                    id: 1,\n                    tags: [],\n                    title: lorem.generateWords(10),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: require(\"./mdSample1.md\").default,\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-07'),\n                    ipUniqueVisits: 0,\n                },\n                {\n                    id: 2,\n                    tags: [],\n                    title: lorem.generateWords(10),\n                    englishTitle: \"title-title\",\n                    abstract: lorem.generateSentences(1),\n                    content: require(\"./mdSample2.md\").default,\n                    updatedOn: new Date('2020-06-04'),\n                    createdOn: new Date('1989-06-07'),\n                    ipUniqueVisits: 0,\n                },\n            ]),\n        )\n    }\n});\n\nexport default testStates"],"sourceRoot":""}